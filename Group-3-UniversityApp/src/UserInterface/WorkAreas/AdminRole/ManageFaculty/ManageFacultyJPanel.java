/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WorkAreas.AdminRole.ManageFaculty;

import Faculty.FacultyDirectory;
import Faculty.FacultyProfile;
import UserInterface.WorkAreas.AdminRole.ManagePersonnelWorkResp.*;
import Persona.Person;
import Persona.PersonDirectory;
import UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp.*;
import University.University;
import Student.StudentDirectory;
import Student.StudentProfile;
import UserAccounts.UserAccount;
import UserAccounts.UserAccountDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;


import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vrmohanc
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    /**
     * Creates new manage persons form
     */
    JPanel CardSequencePanel;
    University university;
    FacultyProfile selectedFaculty;
    FacultyDirectory fd;

    public ManageFacultyJPanel(University uni, JPanel jp) {
        CardSequencePanel = jp;
        this.university = uni;
        
        initComponents();
        refreshTable();

    }

    public void refreshTable() {

        //clear table
        int rc = FacultyTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) FacultyTable.getModel()).removeRow(i);
        }

        fd = university.getFacultydirectory();
        
        
        for (FacultyProfile fa : fd.getTeacherlist()) {

            Object[] row = new Object[6];
            row[0] = fa;
            row[1] = fa.getPerson().getFirstName();
            row[2] = fa.getPerson().getLastName();
            row[3] = fa.getDepartment().getName();
            row[4] = fa.getRole();
            row[5] = fa.getTitle();
            
            
            //get nUID for student accounts only
            //if (ua.getRole().equalsIgnoreCase("Student")) {
                //StudentProfile stu = (StudentProfile) ua.getAssociatedPersonProfile();
                //row[5] = stu.getnUID();
            //}
                                        
            ((DefaultTableModel) FacultyTable.getModel()).addRow(row);
        }  
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FacultyTable = new javax.swing.JTable();
        btnRemoveFaculty = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSearchbyID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        add(Back);
        Back.setBounds(30, 300, 80, 23);

        Next.setText("View/Edit >>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next);
        Next.setBounds(470, 300, 110, 23);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Faculty details");
        add(jLabel1);
        jLabel1.setBounds(30, 90, 190, 17);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage Faculty");
        add(jLabel2);
        jLabel2.setBounds(21, 20, 550, 28);

        FacultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Person ID", "First Name", "Last Name", "Department", "Role", "Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FacultyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FacultyTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(FacultyTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 110, 570, 130);

        btnRemoveFaculty.setText("Remove Faculty");
        btnRemoveFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFacultyActionPerformed(evt);
            }
        });
        add(btnRemoveFaculty);
        btnRemoveFaculty.setBounds(310, 300, 110, 23);

        jLabel3.setText("Search by ID");
        add(jLabel3);
        jLabel3.setBounds(30, 360, 100, 17);
        add(txtSearchbyID);
        txtSearchbyID.setBounds(150, 360, 200, 23);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(380, 360, 72, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
 //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");

    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        //if(selecteduseraccount==null) return;
        int row = FacultyTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        selectedFaculty = (FacultyProfile) FacultyTable.getValueAt(row, 0);
        AdministerFacultyJPanel mppd = new AdministerFacultyJPanel(selectedFaculty, CardSequencePanel, university);
        CardSequencePanel.add(mppd);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);

    }//GEN-LAST:event_NextActionPerformed

    private void FacultyTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FacultyTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
        //int size = UserAccountTable.getRowCount();
        //int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();

        //if (selectedrow < 0 || selectedrow > size - 1) {
         //   return;
        //}
        //selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(selectedrow, 0);
    if (selectedFaculty == null) {
            return;        
    }//GEN-LAST:event_FacultyTableMousePressed
    
    }
    
    private void btnRemoveFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFacultyActionPerformed
        // TODO add your handling code here:
        //remove selected User account
        int row = FacultyTable.getSelectedRow();
     
        //error handling
        if (row >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete selected faculty?", "Warning", JOptionPane.WARNING_MESSAGE);
            
            if (dialogResult == JOptionPane.YES_OPTION) {
                selectedFaculty = (FacultyProfile) FacultyTable.getValueAt(row, 0);
                university.getFacultydirectory().removeFaculty(selectedFaculty);
               
                refreshTable();
            }
            
        } else {
            JOptionPane.showMessageDialog(this,"Select a row to delete", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnRemoveFacultyActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        //search faculty by person ID
        try {
            FacultyProfile faculty = fd.findTeachingFaculty(txtSearchbyID.getText());
            //display search results
            refreshSearchResults(faculty);
        } catch (NullPointerException e){
            JOptionPane.showMessageDialog(this,"faculty with person ID not found", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void refreshSearchResults(FacultyProfile faculty) {
        //clear table
        int rc = FacultyTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) FacultyTable.getModel()).removeRow(i);
        }

    
            Object[] row = new Object[6];
            row[0] = faculty;
            row[1] = faculty.getPerson().getFirstName();
            row[2] = faculty.getPerson().getLastName();
            row[3] = faculty.getDepartment().getName();          
            row[4] = faculty.getRole();
            row[5] = faculty.getTitle();
            //display nUID for found student
            //if (ua.getRole().equalsIgnoreCase("Student")) {
            //    StudentProfile stu = (StudentProfile) ua.getAssociatedPersonProfile();
             //   row[5] = stu.getnUID();
            //}                           
            ((DefaultTableModel) FacultyTable.getModel()).addRow(row);
          
    }
    
    private UserAccount searchStudentbyNUID(String searchID) {
        
        StudentProfile stu = university.getStudentDirectory().findStudentByNUID(searchID);
        
        for (UserAccount ua: university.getUserAccountDirectory().getUserAccountList()) {
            if (ua.isProfileMatch(stu)) {
                return ua;
            }
        }
        
        return null;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTable FacultyTable;
    private javax.swing.JButton Next;
    private javax.swing.JButton btnRemoveFaculty;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtSearchbyID;
    // End of variables declaration//GEN-END:variables
}

