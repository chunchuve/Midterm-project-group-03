/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManagePersonnelWorkResp;

import Department.Department;
import Persona.Address;
import UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp.*;
import University.University;
import Persona.Person;
import Profile.Profile;
import Student.StudentDirectory;
import Student.StudentProfile;
import Employee.EmployeeDirectory;
import Employee.EmployeeProfile;
import Faculty.FacultyProfile;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vrmohanc
 */
public class UpdatePersonJPanel1 extends javax.swing.JPanel {
    
    JPanel CardSequencePanel;
    University university;

    Person selectedPerson;
    Profile selectedProfile;
    StudentProfile student;
    EmployeeProfile employee;
    FacultyProfile faculty;
    
    /**
     * Creates new form UpdatePersonJPanel
     */
    public UpdatePersonJPanel1(JPanel jp, University university, Person person) {
        initComponents();
        this.CardSequencePanel = jp;
        this.university = university;
        this.selectedPerson = person;
        
       //get person info and display form
        txtFirstName.setText(selectedPerson.getFirstName());
        txtLastName.setText(selectedPerson.getLastName());
        txtDateOfBirth.setText(selectedPerson.getDateOfBirth());
        txtLine1.setText(selectedPerson.getAddress().getLine1());
        txtLine2.setText(selectedPerson.getAddress().getLine2());
        txtCity.setText(selectedPerson.getAddress().getCity());
        txtState.setText(selectedPerson.getAddress().getState());
        txtZip.setText(selectedPerson.getAddress().getZipCode());
        
        //String personId = selectedPerson.getPersonId();
        //get the profile corresponding to personID selected and show that profile department
        try {
            student = university.getStudentDirectory().findStudentByPerson(selectedPerson);
            txtDepartment.setText(student.getDepartment().getName());
            selectedProfile = student;
            
        } catch(Exception e) {
            try {
                employee = university.getEmployeeDirectory().findEmployeeByPerson(selectedPerson);
                txtDepartment.setText(employee.getDepartment().getName());
                selectedProfile = employee;
                
            } catch(Exception ex) {
                try {
                    faculty = university.getFacultydirectory().findFacultyByPerson(selectedPerson);
                    txtDepartment.setText(faculty.getDepartment().getName());
                    selectedProfile = faculty;
                    
                } catch(Exception ey) {
                    JOptionPane.showMessageDialog(this, "Person role is not defined yet", "Warning", JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
        }
        
         //display profile specific fields
        try {
            txtRole.setText(selectedProfile.getRole());
        } catch(Exception e){
            return;
        }
       
        txtRole.setEnabled(false);
        txtDepartment.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblDateOfBirth = new javax.swing.JLabel();
        txtDateOfBirth = new javax.swing.JTextField();
        lblLine1 = new javax.swing.JLabel();
        txtLine1 = new javax.swing.JTextField();
        lblLine2 = new javax.swing.JLabel();
        txtLine2 = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblCity1 = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        lblCity2 = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRole = new javax.swing.JTextField();
        txtDepartment = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblTitle.setText("Update Person");

        lblFirstName.setText("First Name*");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblLastName.setText("Last Name*");

        lblDateOfBirth.setText("Date of Birth*");

        lblLine1.setText("Line 1");

        lblLine2.setText("Line 2");

        lblCity.setText("City*");

        lblCity1.setText("State*");

        lblCity2.setText("Zip");

        jLabel1.setText("Role");

        jLabel2.setText("Department");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(399, 399, 399))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(backButton)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblCity1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(23, 23, 23)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(lblCity2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(33, 33, 33)
                                .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblDateOfBirth)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblLine1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblLine2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblLastName)
                                .addComponent(lblFirstName))
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblTitle))
                .addGap(0, 133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(lblTitle))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateOfBirth))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLine1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLine2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCity1)
                    .addComponent(lblCity2)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        //back to admin person form
        backAction();
    }//GEN-LAST:event_backButtonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        //save person changes
        saveFeatures();
        
       
    }//GEN-LAST:event_btnSaveActionPerformed

    private void saveFeatures() {
       
        //save person changes
        //check for blank input
        if (txtFirstName.getText().isBlank() || txtLastName.getText().isBlank() || txtDateOfBirth.getText().isBlank() || 
                txtCity.getText().isBlank() || txtState.getText().isBlank()) {
            JOptionPane.showMessageDialog(this,"fields marked with * are mandatory", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!isValidName(txtFirstName.getText())) {
            JOptionPane.showMessageDialog(this, "First name must be a string of alphabet", "Error", JOptionPane.ERROR_MESSAGE);
            
        } else if (!isValidName(txtLastName.getText())) {
                JOptionPane.showMessageDialog(this, "Last name must be a string of alphabet ", "Error", JOptionPane.ERROR_MESSAGE);
                
        } else if (!isValidDate(txtDateOfBirth.getText(), "dd-MM-yyyy")) {
            JOptionPane.showMessageDialog(this, "Enter date in dd-MM-yyyy format ", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!isValidName(txtCity.getText())) {
                JOptionPane.showMessageDialog(this, "City name must be a string of alphabet ", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!isValidName(txtState.getText())) {
                JOptionPane.showMessageDialog(this, "State must be any two letters of alphabet ", "Error", JOptionPane.ERROR_MESSAGE);
                           
        } else  {
        selectedPerson.setFirstName(txtFirstName.getText());
        selectedPerson.setLastName(txtLastName.getText());
        selectedPerson.setDateOfBirth(txtDateOfBirth.getText());
        
        Address address = selectedPerson.getAddress();
        address.setLine1(txtLine1.getText());
        address.setLine2(txtLine2.getText());
        address.setCity(txtCity.getText());
        address.setState(txtState.getText());
        address.setZipCode(txtZip.getText());
        selectedPerson.setAddress(address);
        JOptionPane.showMessageDialog(this, "Person updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
    }
    
    
    private void backAction() {
        CardSequencePanel.remove(this);
        Component[] componentArray = CardSequencePanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AdministerPersonJPanel adminPersonJPanel = (AdministerPersonJPanel) component;
        adminPersonJPanel.refreshTable();
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }
    //check for valid name: expected alphabet a-z or A-Z
    private static boolean isValidName(String s){
        return s.matches("^[a-zA-Z]+$");
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCity1;
    private javax.swing.JLabel lblCity2;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblLine1;
    private javax.swing.JLabel lblLine2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDateOfBirth;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtLine1;
    private javax.swing.JTextField txtLine2;
    private javax.swing.JTextField txtRole;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    public static boolean isValidDate(String dateText, String pattern) {
        
        try {
            
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                                            //.withResolverStyle(ResolverStyle.STRICT);
            
            // Attempt to parse the date string
            System.out.println(dateText + " " + pattern);
            LocalDate.parse(dateText, formatter);
            System.out.println("Success");
            return true; // Parsing successful, the string is a valid date
        } catch (DateTimeParseException e) {
            // Parsing failed, the string is not a valid date according to the pattern
            System.out.println("fail");
            return false;
        }
    
    }
}
