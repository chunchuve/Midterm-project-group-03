/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp;

import University.University;
import Student.StudentDirectory;
import Student.StudentProfile;
import UserAccounts.UserAccount;
import UserAccounts.UserAccountDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;


import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vrmohanc
 */
public class ManageUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form User Acc form
     */
    JPanel CardSequencePanel;
    University university;
    UserAccount selecteduseraccount;
    UserAccountDirectory uad;


    public ManageUserAccountsJPanel(University uni, JPanel jp) {
        CardSequencePanel = jp;
        this.university = uni;
        
        initComponents();
        refreshTable();

    }

    public void refreshTable() {

        //clear table
        int rc = UserAccountTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) UserAccountTable.getModel()).removeRow(i);
        }

        UserAccountDirectory uad = university.getUserAccountDirectory();
        //StudentDirectory stuDir = business.getStudentDirectory();
        
        
        for (UserAccount ua : uad.getUserAccountList()) {

            Object[] row = new Object[6];
            row[0] = ua;
            row[1] = ua.getStatus(); //Status
            row[2] = ua.getLastActivity(); //Last activity
            row[3] = ua.getLastUpdated();          //Last updated
            row[4] = ua.getRole();                           //role
            
            //get nUID for student accounts only
            if (ua.getRole().equalsIgnoreCase("Student")) {
                StudentProfile stu = (StudentProfile) ua.getAssociatedPersonProfile();
                row[5] = stu.getnUID();
            }
                                        
            ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
        }  
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserAccountTable = new javax.swing.JTable();
        btnCreateUserAcc = new javax.swing.JButton();
        btnRemoveUserAcc = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSearchbyNUID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        add(Back);
        Back.setBounds(30, 300, 80, 23);

        Next.setText("View/Next >>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next);
        Next.setBounds(470, 300, 110, 23);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("User Accounts");
        add(jLabel1);
        jLabel1.setBounds(30, 90, 190, 17);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage User Accounts");
        add(jLabel2);
        jLabel2.setBounds(21, 20, 550, 28);

        UserAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "User Name", "Status", "Last Activity", "Last Updated", "Role", "NUID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserAccountTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(UserAccountTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 110, 550, 130);

        btnCreateUserAcc.setText("Create User");
        btnCreateUserAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserAccActionPerformed(evt);
            }
        });
        add(btnCreateUserAcc);
        btnCreateUserAcc.setBounds(170, 300, 99, 23);

        btnRemoveUserAcc.setText("Remove User");
        btnRemoveUserAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveUserAccActionPerformed(evt);
            }
        });
        add(btnRemoveUserAcc);
        btnRemoveUserAcc.setBounds(310, 300, 110, 23);

        jLabel3.setText("Search by NUID");
        add(jLabel3);
        jLabel3.setBounds(30, 360, 100, 17);
        add(txtSearchbyNUID);
        txtSearchbyNUID.setBounds(150, 360, 200, 23);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        add(btnSearch);
        btnSearch.setBounds(380, 360, 72, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
 //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");

    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        //if(selecteduseraccount==null) return;
        int row = UserAccountTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(row, 0);
        AdminUserAccount mppd = new AdminUserAccount(selecteduseraccount, CardSequencePanel, university);
        CardSequencePanel.add(mppd);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);

    }//GEN-LAST:event_NextActionPerformed

    private void UserAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserAccountTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
        //int size = UserAccountTable.getRowCount();
        //int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();

        //if (selectedrow < 0 || selectedrow > size - 1) {
         //   return;
        //}
        //selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(selectedrow, 0);
    if (selecteduseraccount == null) {
            return;        
    }//GEN-LAST:event_UserAccountTableMousePressed
    
    }
    
    private void btnCreateUserAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserAccActionPerformed
        // TODO add your handling code here:
        
        //add new supplier
        //int i=1;
        AddUserAccountJPanel as = new AddUserAccountJPanel(CardSequencePanel, university);
        CardSequencePanel.add("AddUserAccount", as);
        CardLayout layout = (CardLayout)CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);
        
    }//GEN-LAST:event_btnCreateUserAccActionPerformed

    private void btnRemoveUserAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveUserAccActionPerformed
        // TODO add your handling code here:
        //remove selected User account
        int row = UserAccountTable.getSelectedRow();
     
        //error handling
        if (row >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete selected user account?", "Warning", JOptionPane.WARNING_MESSAGE);
            
            if (dialogResult == JOptionPane.YES_OPTION) {
                selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(row, 0);
                university.getUserAccountDirectory().removeUserAccount(selecteduseraccount);
               
                refreshTable();
            }
            
        } else {
            JOptionPane.showMessageDialog(this,"Select a row to delete", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnRemoveUserAccActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        //search student accounts by NUID
        try {
            UserAccount stu = searchStudentbyNUID(txtSearchbyNUID.getText());
            //display search results
            refreshSearchResults(stu);
        } catch (NullPointerException e){
            JOptionPane.showMessageDialog(this,"student with NUID not found", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private void refreshSearchResults(UserAccount ua) {
        //clear table
        int rc = UserAccountTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) UserAccountTable.getModel()).removeRow(i);
        }

        UserAccountDirectory uad = university.getUserAccountDirectory();
        //StudentDirectory stuDir = business.getStudentDirectory();
    
            Object[] row = new Object[6];
            row[0] = ua;
            row[1] = ua.getStatus(); //Status
            row[2] = ua.getLastActivity(); //Last activity
            row[3] = ua.getLastUpdated();          //Last updated
            row[4] = ua.getRole();                           //role
            //display nUID for found student
            if (ua.getRole().equalsIgnoreCase("Student")) {
                StudentProfile stu = (StudentProfile) ua.getAssociatedPersonProfile();
                row[5] = stu.getnUID();
            }                           
            ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
          
    }
    
    private UserAccount searchStudentbyNUID(String searchID) {
        
        StudentProfile stu = university.getStudentDirectory().findStudentByNUID(searchID);
        
        for (UserAccount ua: university.getUserAccountDirectory().getUserAccountList()) {
            if (ua.isProfileMatch(stu)) {
                return ua;
            }
        }
        
        return null;
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Next;
    private javax.swing.JTable UserAccountTable;
    private javax.swing.JButton btnCreateUserAcc;
    private javax.swing.JButton btnRemoveUserAcc;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtSearchbyNUID;
    // End of variables declaration//GEN-END:variables
}

