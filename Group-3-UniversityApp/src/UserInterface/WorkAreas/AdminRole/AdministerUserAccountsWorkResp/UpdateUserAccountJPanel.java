/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp;

import University.University;
import Persona.Person;
import Profile.Profile;
import Student.StudentDirectory;
import Student.StudentProfile;
import UserAccounts.UserAccount;
import UserAccounts.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vrmohanc
 */
public class UpdateUserAccountJPanel extends javax.swing.JPanel {
    
    JPanel CardSequencePanel;
    University university;

    UserAccount selecteduseraccount;
    
    /**
     * Creates new form UpdateUserAccountJPanel
     */
    public UpdateUserAccountJPanel(JPanel jp, University university, UserAccount sua) {
        initComponents();
        this.CardSequencePanel = jp;
        this.university = university;
        this.selecteduseraccount = sua;
        
        StudentDirectory stuDir = university.getStudentDirectory();
        
        //get acc info and display form
        txtUserName.setText(selecteduseraccount.getUserLoginName());
        txtPswd.setText(selecteduseraccount.getPassword());
        txtStatus.setText(selecteduseraccount.getStatus());
        txtRole.setText(selecteduseraccount.getRole());
        txtRole.setEnabled(false);
        txtPersonID.setText(selecteduseraccount.getPersonId());
        txtPersonID.setEnabled(false);
        
            
        //display nUID for found student
        if (selecteduseraccount.getRole().equalsIgnoreCase("Student")) {
            StudentProfile stu = (StudentProfile) selecteduseraccount.getAssociatedPersonProfile();
            txtNUID.setText(stu.getnUID());
        }
        
        //disable edit for NUID for not students
        if (!selecteduseraccount.getRole().equalsIgnoreCase("Student")) {
                
                txtNUID.setEnabled(false);       
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        lblPswd = new javax.swing.JLabel();
        txtPswd = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        txtRole = new javax.swing.JTextField();
        lblFullName = new javax.swing.JLabel();
        txtPersonID = new javax.swing.JTextField();
        lblNUID = new javax.swing.JLabel();
        txtNUID = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        backButton.setText("<< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        lblTitle.setText("Update User Account");

        lblUserName.setText("User Name");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblPswd.setText("Password");

        lblStatus.setText("Status");

        lblRole.setText("Role");

        lblFullName.setText("Person ID");

        lblNUID.setText("NUID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(backButton)
                        .addGap(22, 22, 22)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPswd)
                                .addGap(30, 30, 30)
                                .addComponent(txtPswd, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblRole)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFullName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblNUID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNUID, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(289, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addComponent(lblUserName)
                    .addGap(22, 22, 22)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(289, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(lblTitle))
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPswd))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRole))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFullName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNUID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(85, 85, 85))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(70, 70, 70)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblUserName))
                    .addContainerGap(425, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        //back to admin user accounts form
        backAction();
    }//GEN-LAST:event_backButtonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:

        //update user account
        
        //input validations
        //check for blank input
        if (txtUserName.getText().isBlank() || txtPswd.getText().isBlank() || txtStatus.getText().isBlank() || 
                txtRole.getText().isBlank() || txtPersonID.getText().isBlank()) {
            JOptionPane.showMessageDialog(null,"All fields are mandatory.");
            return;
        }
        //check for valid input
        if (!isValidName(txtUserName.getText())) {
            JOptionPane.showMessageDialog(this, "Entry must be a string of alphabet", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (!(txtStatus.getText().equalsIgnoreCase("active") || txtStatus.getText().equalsIgnoreCase("active") )) {
                JOptionPane.showMessageDialog(this, "Status can be either \"active\" or \"inactive\" ", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
        } else if (!(txtRole.getText().equalsIgnoreCase("student") || 
                txtRole.getText().equalsIgnoreCase("admin") || txtRole.getText().equalsIgnoreCase("faculty") )) {
            JOptionPane.showMessageDialog(this, "Role can be either \"student\" or \"admin\" or \"faculty\" ", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else
        
        //check if NUID is blank only for students    
        if (selecteduseraccount.getRole().equalsIgnoreCase("Student")) {
            if (txtNUID.getText().isBlank()) {
                JOptionPane.showMessageDialog(null,"All fields are mandatory.");
                return;
            }
        }    
        
        saveFeatures();
        JOptionPane.showMessageDialog(this, "Account updated successfully", "Warning", JOptionPane.INFORMATION_MESSAGE);
        
        txtRole.setEditable(false);
        txtPersonID.setEditable(false);
       
    }//GEN-LAST:event_btnSaveActionPerformed

    private void saveFeatures() {
       
        //save user account changes
        
        selecteduseraccount.setUsername(txtUserName.getText());
        selecteduseraccount.setPassword(txtPswd.getText());
        selecteduseraccount.setStatus(txtStatus.getText());
        //selecteduseraccount.setRole(txtRole.getText());
        
        //selecteduseraccount.setUsername(txtFullName.getText());
        //save nuid only for students
        if (selecteduseraccount.getRole().equalsIgnoreCase("Student")) {
            StudentProfile stu = (StudentProfile) selecteduseraccount.getAssociatedPersonProfile();
            stu.setnUID(txtNUID.getText());
        }    
       
        selecteduseraccount.setLastUpdated(LocalDateTime.now());
        
    }
    
    
    private void backAction() {
        CardSequencePanel.remove(this);
        Component[] componentArray = CardSequencePanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AdminUserAccount adminUserAccount = (AdminUserAccount) component;
        adminUserAccount.refreshTable();
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }
    
    //check for valid name: expected alphabet a-z or A-Z
    private static boolean isValidName(String s){
        return s.matches("^[a-zA-Z]+$");
    }

    //check for valid name: expected alphabet a-z or A-Z
    private static boolean isValidNumber(String s){
        return s.matches("^[0-9]+$");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblNUID;
    private javax.swing.JLabel lblPswd;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtNUID;
    private javax.swing.JTextField txtPersonID;
    private javax.swing.JTextField txtPswd;
    private javax.swing.JTextField txtRole;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
