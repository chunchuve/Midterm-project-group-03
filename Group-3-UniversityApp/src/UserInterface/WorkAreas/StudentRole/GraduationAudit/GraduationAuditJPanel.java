/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.StudentRole.GraduationAudit;

import CourseCatalog.Course;
import CourseSchedule.SeatAssignment;
import Degree.Degree;
import Department.Department;
import Student.StudentProfile;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author csong
 */
public class GraduationAuditJPanel extends javax.swing.JPanel {

    /**
     * Creates new form GraduationAuditJPanel
     */
    StudentProfile student;
    JPanel CardSequencePanel;
    Degree degree;
    ArrayList<Course> coreList;
    ArrayList<Course> electiveList;
    ArrayList<SeatAssignment> seatAssignmentList;
    public GraduationAuditJPanel(StudentProfile s, Department d, JPanel csp) {
        initComponents();
        student = s;
        CardSequencePanel = csp;
        
        // get degree requirements
        degree = d.getDegree();
        coreList = degree.getCorelist();
        electiveList = degree.getElectives();
        
        // get student information
        seatAssignmentList = student.getTranscript().getCourseList();
        
        // populate tables and fields
        fieldDegree.setText(degree.getTitle()); // degree title
        
        // populate core requirement total staus
        boolean coreRequirementSatisfied = degree.validateCoreClasses(seatAssignmentList);
        if(coreRequirementSatisfied) {
            fieldCoreStatus.setText("Satisfied");
        } else {
            fieldCoreStatus.setText("Not Satisfied");
        }
        
        
        // populate number of electives took
        fieldElectivesNumber.setText(String.valueOf(degree.getTotalElectiveCoursesTaken(seatAssignmentList)));       
        
        // populate number of pending credits
        fieldPendingCH.setText(String.valueOf(degree.getTotalPendingCredits(seatAssignmentList)));

        // populate number of valid credits
        fieldValidCH.setText(String.valueOf(degree.getTotalValidCredits(seatAssignmentList)));
        
        // populate total requirement staus
        boolean totalRequirementSatisfied = degree.isStudentReadyToGraduate(student);
        if(totalRequirementSatisfied) {
            fieldTotalStatus.setText("Satisfied");
        } else {
            fieldTotalStatus.setText("Not Satisfied");
        }
        
        //populate tables
        populateCoreTable();
        populateElectiveTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCore = new javax.swing.JTable();
        lblCore = new javax.swing.JLabel();
        lblDegree = new javax.swing.JLabel();
        fieldDegree = new javax.swing.JTextField();
        lblCoreNotes = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblElective = new javax.swing.JTable();
        lblElective = new javax.swing.JLabel();
        lblCoreNotes1 = new javax.swing.JLabel();
        lblCoreStatus = new javax.swing.JLabel();
        fieldCoreStatus = new javax.swing.JTextField();
        lblTotalStatus = new javax.swing.JLabel();
        fieldTotalStatus = new javax.swing.JTextField();
        lblToalNotes = new javax.swing.JLabel();
        lbElectivesNumber = new javax.swing.JLabel();
        fieldElectivesNumber = new javax.swing.JTextField();
        lblValidCH = new javax.swing.JLabel();
        fieldValidCH = new javax.swing.JTextField();
        fieldPendingCH = new javax.swing.JTextField();
        lblPendingCH = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblTitle.setText("Graduation Audit");

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        tblCore.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblCore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Number", "Name", "Credit Hour", "Grade", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCore);
        if (tblCore.getColumnModel().getColumnCount() > 0) {
            tblCore.getColumnModel().getColumn(1).setMinWidth(200);
        }

        lblCore.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCore.setText("Core:");

        lblDegree.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDegree.setText("Degree:");

        lblCoreNotes.setText("*Core courses must complete with at least B or 3.0 to meet requirement.");

        tblElective.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblElective.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Number", "Name", "Credit Hour", "Grade", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblElective);
        if (tblElective.getColumnModel().getColumnCount() > 0) {
            tblElective.getColumnModel().getColumn(1).setMinWidth(200);
        }

        lblElective.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblElective.setText("Electives:");

        lblCoreNotes1.setText("*Elective courses must complete with at least C or 2.0 to meet requirement.");

        lblCoreStatus.setText("Core Requirement Status:");

        fieldCoreStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        lblTotalStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotalStatus.setText("Graduation Requirement Status:");

        fieldTotalStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        lblToalNotes.setText("*Must have at least 32 total valid creadit hours to graduate.");

        lbElectivesNumber.setText("Number of electives took:");

        fieldElectivesNumber.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        lblValidCH.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblValidCH.setText("Total Valid Credit Hours:");

        fieldValidCH.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        fieldPendingCH.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        lblPendingCH.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPendingCH.setText("Pending Credit Hours:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(Back))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(lblCore)
                        .addGap(32, 32, 32)
                        .addComponent(lblCoreNotes, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCoreStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldCoreStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(200, 200, 200)
                                .addComponent(lblDegree)
                                .addGap(27, 27, 27)
                                .addComponent(fieldDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(lblElective)
                        .addGap(18, 18, 18)
                        .addComponent(lblCoreNotes1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbElectivesNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldElectivesNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(lblToalNotes, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTotalStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(lblPendingCH, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fieldPendingCH, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblValidCH, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldTotalStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldValidCH, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDegree)
                    .addComponent(lblTitle)
                    .addComponent(fieldDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCore)
                    .addComponent(lblCoreNotes)
                    .addComponent(lblCoreStatus)
                    .addComponent(fieldCoreStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblElective)
                    .addComponent(lblCoreNotes1)
                    .addComponent(lbElectivesNumber)
                    .addComponent(fieldElectivesNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValidCH)
                    .addComponent(fieldValidCH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPendingCH)
                        .addComponent(fieldPendingCH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTotalStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalStatus)
                    .addComponent(lblToalNotes))
                .addGap(15, 15, 15)
                .addComponent(Back)
                .addGap(71, 71, 71))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void populateCoreTable() {
        DefaultTableModel model = (DefaultTableModel) tblCore.getModel();
        model.setRowCount(0);
        
        
        // iterate over the degree's core course
        for(Course core: coreList) {
            Object[] row = new Object[5];
            row[0] = core.getCourseNumber();
            row[1] = core.getCourseName();
            row[2] = core.getCredits();
            String grade = "N/A";
            String status = "Not Enrolled";
            for (SeatAssignment sa: seatAssignmentList) {
                // check if the student took the course
                if (sa.getAssociatedCourse().equals(core)) {
                    // check if completed the course
                    if(!sa.isCompleted()) {
                        status = "In Progress";
                    } else {
                        grade = String.valueOf(sa.getGrade());
                        boolean satisfied = degree.isCoreGradePassed(sa, core);
                        // if 3.0 (B) or above, passed
                        if (satisfied) {
                            status = "Passed";
                        } else {
                            status = "Failed";
                        }
                    }
                }      
            }
            row[3] = grade;
            row[4] = status;
            // add row
            model.addRow(row);
        
        }
        
    }
    
    private void populateElectiveTable() {
        DefaultTableModel model = (DefaultTableModel) tblElective.getModel();
        model.setRowCount(0);
        
        
        // iterate over the degree's elective course
        for(Course elective: electiveList) {
            Object[] row = new Object[5];
            row[0] = elective.getCourseNumber();
            row[1] = elective.getCourseName();
            row[2] = elective.getCredits();
            String grade = "N/A";
            String status = "Not Taking";
            for (SeatAssignment sa: seatAssignmentList) {
                // check if the student took the course
                if (sa.getAssociatedCourse().equals(elective)) {
                    // check if completed the course
                    if(!sa.isCompleted()) {
                        status = "In Progress";
                    } else {
                        grade = String.valueOf(sa.getGrade());
                        boolean satisfied = degree.isElectiveGradePassed(sa, elective);
                        // if 2.0 (C) or above, passed
                        if (satisfied) {
                            status = "Passed";
                        } else {
                            status = "Failed";
                        }
                    }
                }      
            }
            row[3] = grade;
            row[4] = status;
            // add row
            model.addRow(row);
        
        }
        
    }

    
    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_BackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField fieldCoreStatus;
    private javax.swing.JTextField fieldDegree;
    private javax.swing.JTextField fieldElectivesNumber;
    private javax.swing.JTextField fieldPendingCH;
    private javax.swing.JTextField fieldTotalStatus;
    private javax.swing.JTextField fieldValidCH;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbElectivesNumber;
    private javax.swing.JLabel lblCore;
    private javax.swing.JLabel lblCoreNotes;
    private javax.swing.JLabel lblCoreNotes1;
    private javax.swing.JLabel lblCoreStatus;
    private javax.swing.JLabel lblDegree;
    private javax.swing.JLabel lblElective;
    private javax.swing.JLabel lblPendingCH;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToalNotes;
    private javax.swing.JLabel lblTotalStatus;
    private javax.swing.JLabel lblValidCH;
    private javax.swing.JTable tblCore;
    private javax.swing.JTable tblElective;
    // End of variables declaration//GEN-END:variables


}
