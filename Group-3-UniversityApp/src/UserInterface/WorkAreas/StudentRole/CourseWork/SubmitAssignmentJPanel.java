/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.StudentRole.CourseWork;

import CourseSchedule.AssignmentSubmission;
import CourseSchedule.SeatAssignment;
import Profile.Profile;
import UserInterface.WorkAreas.StudentRole.StudentWorkAreaJPanel;
import java.awt.CardLayout;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author csong
 */
public class SubmitAssignmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SubmitAssignment
     */
    SeatAssignment sa;
    JPanel CardSequencePanel;
    private final JFileChooser fileChooser = new JFileChooser();
    String submissionFilePath = null;
    File submissionFile = null;
    StudentWorkAreaJPanel swajp;
    
    public SubmitAssignmentJPanel(SeatAssignment sa, JPanel csp, StudentWorkAreaJPanel swajp) {
        initComponents();
        this.sa = sa;
        CardSequencePanel = csp;
        this.swajp = swajp; // help with stack navigation
        
        //filter file type by word or pdf
        FileFilter fileFilter = new FileNameExtensionFilter("Word or PDF Documents", "pdf", "docx");
        
        // clear existing filter
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(fileFilter);
        fileChooser.setFileFilter(fileFilter);
        
        // populated files
        populateAssignmentTable();
        
    }

    private void populateAssignmentTable() {
        ArrayList<AssignmentSubmission> assignmentList = sa.getAssignmentSubmissionList();
        
        DefaultTableModel model = (DefaultTableModel) tblAssignment.getModel();
        model.setRowCount(0);
        
        for (AssignmentSubmission as: assignmentList) {
            Object row[] = new Object[4];
                row[0] = as.getAssignmentName();
                row[1] = as.getComment();
                row[2] = as.getFilePath();
                row[3] = as.getSubmissionDate();
                model.addRow(row);
        }
        
        
    
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAttach = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        lblName = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAssignment = new javax.swing.JTable();
        Back2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        btnAttach.setText("Attach");
        btnAttach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttachActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblTitle.setText("Assignments");

        lblDescription.setText("Comments:");

        txtComment.setColumns(20);
        txtComment.setRows(5);
        jScrollPane1.setViewportView(txtComment);

        lblName.setText("Name:");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tblAssignment.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblAssignment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Assignment Name", "Comment", "Path", "Submission Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblAssignment);

        Back2.setText("<< Back");
        Back2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDescription)
                            .addComponent(lblName))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemove)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAttach, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(77, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(Back2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblTitle)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName)
                    .addComponent(btnAttach))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnRemove)
                        .addGap(18, 18, 18)
                        .addComponent(btnSubmit))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(Back2)
                .addGap(51, 51, 51))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttachActionPerformed
        
        // open the file browser
        int returnVal = fileChooser.showOpenDialog(this);

        // validate the chosen file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // check if the file is valid
            if (file != null && file.exists() && file.isFile()) {
                // store the path and file
                submissionFilePath = file.getAbsolutePath(); 
                submissionFile = file; 
                JOptionPane.showMessageDialog(this, "File: '" + file.getName()+ "' successfully attached!", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {
                submissionFilePath = null;
                submissionFile = null;
                JOptionPane.showMessageDialog(this, "File failed to attach.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(this, "File selection was cancelled", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else if (returnVal == JFileChooser.ERROR_OPTION) {
            JOptionPane.showMessageDialog(this, "Error occured when select a file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAttachActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // select selected file and file path to null
        if (submissionFilePath != null || submissionFile != null) {
            submissionFilePath = null;
            submissionFile = null;
            JOptionPane.showMessageDialog(this, "Attachment successfully removed!", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
            JOptionPane.showMessageDialog(this, "There is no attachment to remove.", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        String assignmentName = txtName.getText();
        String comment = "" + txtComment.getText();
        
        if (submissionFile == null || submissionFilePath == null){
            JOptionPane.showMessageDialog(this, "No file selected. Must attach a file to submit.", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // check if name is empty
        if (assignmentName.isBlank()){
            JOptionPane.showMessageDialog(this, "Assignment Name cannot be empty", "WARNING", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        sa.addAssignment(assignmentName, comment, submissionFilePath);
        JOptionPane.showMessageDialog(this, "Assignment successfully Submitted", "Warning", JOptionPane.INFORMATION_MESSAGE);
        populateAssignmentTable();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void Back2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back2ActionPerformed
        Stack<String> historyStack = swajp.getHistoryStack();
        JPanel csp = swajp.getCardSequencePanel();
        if (!historyStack.empty()) {
            String previousKey = historyStack.pop();
            CardLayout layout = (CardLayout) csp.getLayout();
            layout.show(csp, previousKey);
            csp.remove(this);
        }else {
            // go to student main frame
            CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
            layout.show(CardSequencePanel, "StudentWorkAreaJPanel");
        }
    }//GEN-LAST:event_Back2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back2;
    private javax.swing.JButton btnAttach;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblAssignment;
    private javax.swing.JTextArea txtComment;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
