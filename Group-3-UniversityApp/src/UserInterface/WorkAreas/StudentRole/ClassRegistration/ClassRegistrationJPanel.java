/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.StudentRole.ClassRegistration;

import CourseSchedule.CourseLoad;
import CourseSchedule.CourseOffer;
import CourseSchedule.CourseSchedule;
import CourseSchedule.SeatAssignment;
import Department.Department;
import Profile.Profile;
import Student.StudentProfile;
import Student.Transcript;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author csong
 */
public class ClassRegistrationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ClassRegistrationJPanel
     */
    
    StudentProfile student;
    Department department;
    HashMap<String, CourseSchedule> masterCourseSchedule;
    JPanel CardSequencePanel;
    Transcript transcript;
    Set<String> futureSemesters;
    public ClassRegistrationJPanel(StudentProfile s, Department d, JPanel csp) {
        initComponents();
        student = s;
        department = d;
        CardSequencePanel = csp;
        
        transcript = student.getTranscript();
        masterCourseSchedule = department.getMastercoursecatalog();
        
        // get future semesters by filtering
        futureSemesters = getFutureSemesters();
        populateCombo();
        populateCourseOfferTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        lblCourseOffers = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseOffers = new javax.swing.JTable();
        btnRemoveEnroll = new javax.swing.JButton();
        btnEnroll = new javax.swing.JButton();
        btnCourseDetails = new javax.swing.JButton();
        lblSemester = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        lblEnroll = new javax.swing.JLabel();
        btnSearchCourse = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEnrolled = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 204));

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblTitle.setText("Class Registration");

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        lblCourseOffers.setText("Course Offers:");

        tblCourseOffers.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblCourseOffers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Number", "Name", "Faculty", "Availability", "Credit Hr."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourseOffers);
        if (tblCourseOffers.getColumnModel().getColumnCount() > 0) {
            tblCourseOffers.getColumnModel().getColumn(1).setMinWidth(200);
        }

        btnRemoveEnroll.setText("Remove Enrollment");
        btnRemoveEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEnrollActionPerformed(evt);
            }
        });

        btnEnroll.setText("Enroll");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        btnCourseDetails.setText("View Course Detail");
        btnCourseDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseDetailsActionPerformed(evt);
            }
        });

        lblSemester.setText("Semester:");

        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        lblEnroll.setText("Enrolled Courses:");

        btnSearchCourse.setText("Search Class");
        btnSearchCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCourseActionPerformed(evt);
            }
        });

        tblEnrolled.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblEnrolled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Number", "Name", "Faculty", "Credit Hr."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblEnrolled);
        if (tblEnrolled.getColumnModel().getColumnCount() > 0) {
            tblEnrolled.getColumnModel().getColumn(1).setMinWidth(200);
        }

        jButton1.setText("Clear Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("*search result only applied to selected semester's course.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCourseDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEnroll, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Back)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblEnroll, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRemoveEnroll)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, Short.MAX_VALUE)
                                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblCourseOffers)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnSearchCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))))))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lblTitle)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblCourseOffers))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCourseDetails)
                    .addComponent(btnEnroll))
                .addGap(15, 15, 15)
                .addComponent(lblEnroll)
                .addGap(17, 17, 17)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnRemoveEnroll)
                        .addContainerGap(120, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(Back)
                        .addGap(107, 107, 107))))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    // populate semester combo box
    private void populateCombo() {
        //Set<String> semesters = masterCourseSchedule.keySet();
        

        for (String s: futureSemesters) {
            cmbSemester.addItem(s);
        }
    }
    

    
    private void populateCourseOfferTable() {
        // get selected semester
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        
        // validate selected semester
        if (selectedSemester == null) {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCourseOffers.getModel();
        model.setRowCount(0);

        CourseSchedule selectedCourseSchedule = department.getCourseSchedule(selectedSemester);
        for (CourseOffer co : selectedCourseSchedule.getSchedule()) {
            Object row[] = new Object[5];
            row[0] = co.getCourseNumber();
            row[1] = co;
            
            // check faculty
            String facultyName = "Unknown";
            Profile faculty = co.getFacultyProfile();
            if (faculty != null) {
                facultyName = faculty.getPersonFullName();
            }
            row[2] = facultyName;
            row[3] = co.getSeatAvailability();
            row[4] = co.getCreditHours();
            model.addRow(row);
        }
        
    }
    
    // populate course offer by search() 
    private void populateCourseOfferTable(String keyword, String selectedSemester){
        
        
        DefaultTableModel model = (DefaultTableModel) tblCourseOffers.getModel();
        model.setRowCount(0);
        
        CourseSchedule selectedCourseSchedule = department.getCourseSchedule(selectedSemester);
        for (CourseOffer co: selectedCourseSchedule.getSchedule()) {
            // check if the course name or course number contains keyword
            if(co.toString().toLowerCase().contains(keyword.toLowerCase()) || co.getCourseNumber().toLowerCase().contains(keyword.toLowerCase())) {
                Object row[] = new Object[5];
                row[0] = co.getCourseNumber();
                row[1] = co;

                // check faculty
                String facultyName = "Unknown";
                Profile faculty = co.getFacultyProfile();
                if (faculty != null) {
                    facultyName = faculty.getPersonFullName();
                }
                row[2] = facultyName;
                row[3] = co.getSeatAvailability();
                row[4] = co.getCreditHours();
                model.addRow(row);
            }
        }
        
        
    }
    
    private void populateEnrolledCourseTable() { 
        // get selected semester
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        // validate selected semester
        if (selectedSemester == null) {
            return;
        }
        
        // check if courseload for this semester existed, if not, create a courseload
        CourseLoad currentCourseLoad = transcript.getCourseLoadBySemester(selectedSemester);
        if(currentCourseLoad == null) {
            currentCourseLoad = transcript.newCourseLoad(selectedSemester);
        }
        
        DefaultTableModel model = (DefaultTableModel) tblEnrolled.getModel();
        model.setRowCount(0);
        
        for (SeatAssignment s: currentCourseLoad.getSeatAssignments()) {
            Object row[] = new Object[4];
                row[0] = s.getCourseOffer().getCourseNumber();
                row[1] = s;

                // check faculty
                String facultyName = "Unknown";
                Profile faculty = s.getCourseOffer().getFacultyProfile();
                if (faculty != null) {
                    facultyName = faculty.getPersonFullName();
                }
                row[2] = facultyName;
                row[3] = s.getCourseOffer().getCreditHours();
                model.addRow(row);
        
        }
        
        
        
        
    }
    
    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_BackActionPerformed

    private void btnRemoveEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEnrollActionPerformed
        int selectedRowIndex = tblEnrolled.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an enrolled course to remove", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        SeatAssignment selectedSA = (SeatAssignment) tblEnrolled.getValueAt(selectedRowIndex, 1);
        // get selected semester
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        // validate selected semester
        if (selectedSemester == null) {
            return;
        }
        
        // get the course load
        CourseLoad currentCourseLoad = transcript.getCourseLoadBySemester(selectedSemester);
        
    // unassign seat from student's course load
        try{
            currentCourseLoad.unEnrollCourse(selectedSA);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Something wrong. Please refresh", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        //repopulate table
        populateCourseOfferTable();
        populateEnrolledCourseTable();
        
        // show successful message
        JOptionPane.showMessageDialog(this, "Selected course successfully un-enrolled.", "Information", JOptionPane.INFORMATION_MESSAGE);
        return;
        
    }//GEN-LAST:event_btnRemoveEnrollActionPerformed

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        int selectedRowIndex = tblCourseOffers.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a course offer to enroll.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // get selected course offer
        CourseOffer selectedCourseOffer = (CourseOffer) tblCourseOffers.getValueAt(selectedRowIndex, 1);
        // check seat availability
        if(selectedCourseOffer.getSeatAvailability() <= 0) {
            JOptionPane.showMessageDialog(this, "Sorry, not enough seats. Please select a different course offer to enroll.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // get selected semester
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        // validate selected semester
        if (selectedSemester == null) {
            return;
        }
        
        // get courseload
        CourseLoad cl = transcript.getCourseLoadBySemester(selectedSemester);
        
        // check if already enrolled
        if(transcript.isCourseEnrolled(selectedCourseOffer)) {
            JOptionPane.showMessageDialog(this, "Sorry. You already enrolled or took this course.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        // enroll
        SeatAssignment sa = selectedCourseOffer.assignEmptySeat(cl);
        
        //repopulate table
        populateCourseOfferTable();
        populateEnrolledCourseTable();
    }//GEN-LAST:event_btnEnrollActionPerformed

    private void btnCourseDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseDetailsActionPerformed
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        
        int selectedRowIndex = tblCourseOffers.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a course offer from the table to view", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        CourseOffer selectedCourseOffer = (CourseOffer) tblCourseOffers.getValueAt(selectedRowIndex, 1);
        ViewCourseOfferDetailJPanel vcodjp = new ViewCourseOfferDetailJPanel(selectedSemester, selectedCourseOffer, CardSequencePanel);
        CardSequencePanel.add("ViewCourseOfferDetailJPanel", vcodjp);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.next(CardSequencePanel);
        
    }//GEN-LAST:event_btnCourseDetailsActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        populateCourseOfferTable();
        populateEnrolledCourseTable();
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void btnSearchCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCourseActionPerformed
        // get selected semester
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        
        // validate selected semester
        if (selectedSemester == null) {
            JOptionPane.showMessageDialog(this, "Please select a semester to search for course.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // validate keyword
        String keyword = txtSearch.getText();
        if(keyword.isBlank()) {
            JOptionPane.showMessageDialog(this, "Please type keywords for course name or course number.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        populateCourseOfferTable(keyword, selectedSemester);
    }//GEN-LAST:event_btnSearchCourseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        populateCourseOfferTable();
        txtSearch.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed


    private Set<String> getFutureSemesters() {
        Set<String> semesters = masterCourseSchedule.keySet();
        Set<String> filteredSemesters = new HashSet<>();
        
        // get today's year and academic season
        int currentYear = LocalDate.now().getYear();
        String currentSeason = getCurrentSeason();
        for (String s: semesters) {
            try{
                // split the semester string ex. "Fall 2026"
                String[] semesterParts = s.split(" ");
                // Get semester season
                String semesterSeason = semesterParts[0];
                int semesterYear = Integer.parseInt(semesterParts[1]);
                
                // add the semester if the year is greater than current year
                if (semesterYear > currentYear) {
                    filteredSemesters.add(s);
                } else if(semesterYear == currentYear) {
                    // add the semester if the semester season didn't begin
                    if(!didSemesterSeasonBegin(currentSeason, semesterSeason)) {
                        filteredSemesters.add(s);
                    }
                }
            } catch( Exception e) {
                System.out.println("non-formatted semesters are ignored");
            }
        }
    // get today's date
        
         
        return filteredSemesters;
    }

    private boolean didSemesterSeasonBegin(String currentSeason, String semesterSeason) {
        List<String> seasonList = Arrays.asList("SPRING", "SUMMER", "FALL", "WINTER");
        
        int currentSeasonIndex = seasonList.indexOf(currentSeason);
        int semesterSeasonIndex = seasonList.indexOf(semesterSeason.toUpperCase());
        // handle index error
        if(currentSeasonIndex <0 || semesterSeasonIndex <0) {
            return true;
        }
        
        if(semesterSeasonIndex > currentSeasonIndex) {
            return false;
        }
        return true;
    }
    
    private String getCurrentSeason() {
        int month = LocalDate.now().getMonthValue();
        if (month == 12 || month == 1) {
            return "WINTER";
        }
        else if(month >=9) {
            return "FALL";
        } else if (month >= 5) {
            return "SUMMER";
        } else {
            return "SPRING";
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton btnCourseDetails;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnRemoveEnroll;
    private javax.swing.JButton btnSearchCourse;
    private javax.swing.JComboBox cmbSemester;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCourseOffers;
    private javax.swing.JLabel lblEnroll;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCourseOffers;
    private javax.swing.JTable tblEnrolled;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables








}
